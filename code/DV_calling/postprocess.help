Postprocess output from call_variants to produce a VCF file.
flags:

/tmp/Bazel.runfiles_q13zov1q/runfiles/com_google_deepvariant/deepvariant/postprocess_variants.py:
  --cnn_homref_call_min_gq: All CNN RefCalls whose GQ is less than this value
    will have ./. genotype instead of 0/0.
    (default: '20.0')
    (a number)
  -j,--cpus: Number of worker processes to use. Use 0 to disable parallel
    processing. Minimum of 2 CPUs required for parallel processing.
    (default: '128')
    (an integer)
  --debug_output_all_candidates: <ALT|INFO>: Outputs all candidates considered
    by DeepVariant as additional ALT alleles  or as an INFO field. For ALT,
    filtered candidates are assigned a GL=0 and added as ALTs alleles, but do
    not appear in any sample genotypes. This flag is useful for debugging
    purposes. ALT-mode is incompatible with the multiallelic caller.
  --[no]group_variants: If using vcf_candidate_importer and multi-allelic sites
    are split across multiple lines in VCF, set to False so that variants are
    not grouped when transforming CallVariantsOutput to Variants.
    (default: 'true')
  --gvcf_outfile: Optional. Destination path where we will write the Genomic VCF
    output.
  --haploid_contigs: Optional list of non autosomal chromosomes. For all listed
    chromosomesHET probabilities are not considered.
    (a comma separated list)
  --infile: Required. Path(s) to CallVariantOutput protos in TFRecord format to
    postprocess. These should be the complete set of outputs for
    call_variants.py.
  --multi_allelic_qual_filter: The qual value below which to filter multi-
    allelic variants.
    (default: '1.0')
    (a number)
  --nonvariant_site_tfrecord_path: Optional. Path(s) to the non-variant sites
    protos in TFRecord format to convert to gVCF file. This should be the
    complete set of outputs from the --gvcf flag of make_examples.py.
  --[no]only_keep_pass: If True, only keep PASS calls.
    (default: 'false')
  --outfile: Required. Destination path where we will write output variant calls
    in VCF format.
  --par_regions_bed: Optional BED file containing Human Pseudoautosomal Region
    (PAR) regions.Variants within this region are unaffected by genotype
    reallocation applied on regions supplied by --haploid_contigs flag.
  --[no]process_somatic: Optional. If specified the input is treated as somatic.
    (default: 'false')
  --qual_filter: Any variant with QUAL < qual_filter will be filtered in the VCF
    file.
    (default: '1.0')
    (a number)
  --ref: Required. Genome reference in FAI-indexed FASTA format. Used to
    determine the sort order for the emitted variants and the VCF header.
  --sample_name: Optional. If set, this will only be used if the sample name
    cannot be determined from the CallVariantsOutput or non-variant sites
    protos.
  --[no]use_multiallelic_model: If True, use a specialized model for genotype
    resolution of multiallelic cases with two alts.
    (default: 'false')
  --[no]vcf_stats_report: Deprecated. Use vcf_stats_report.py instead.
    (default: 'false')

absl.app:
  -?,--[no]help: show this help
    (default: 'false')
  --[no]helpfull: show full help
    (default: 'false')
  --[no]helpshort: show this help
    (default: 'false')
  --[no]helpxml: like --helpfull, but generates XML output
    (default: 'false')
  --[no]only_check_args: Set to true to validate args and exit.
    (default: 'false')
  --[no]pdb: Alias for --pdb_post_mortem.
    (default: 'false')
  --[no]pdb_post_mortem: Set to true to handle uncaught exceptions with PDB post
    mortem.
    (default: 'false')
  --profile_file: Dump profile information to a file (for python -m pstats).
    Implies --run_with_profiling.
  --[no]run_with_pdb: Set to true for PDB debug mode
    (default: 'false')
  --[no]run_with_profiling: Set to true for profiling the script. Execution will
    be slower, and the output format might change over time.
    (default: 'false')
  --[no]use_cprofile_for_profiling: Use cProfile instead of the profile module
    for profiling. This has no effect unless --run_with_profiling is set.
    (default: 'true')

absl.logging:
  --[no]alsologtostderr: also log to stderr?
    (default: 'false')
  --log_dir: directory to write logfiles into
    (default: '')
  --logger_levels: Specify log level of loggers. The format is a CSV list of
    `name:level`. Where `name` is the logger name used with
    `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g.
    `myapp.foo:INFO,other.logger:DEBUG`
    (default: '')
  --[no]logtostderr: Should only log to stderr?
    (default: 'false')
  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when
    it's logged to stderr, --verbosity is set to INFO level, and python logging
    is used.
    (default: 'true')
  --stderrthreshold: log messages at this level, or more severe, to stderr in
    addition to the logfile.  Possible values are 'debug', 'info', 'warning',
    'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr
    cancels the effect of this flag. Please also note that this flag is subject
    to --verbosity and requires logfile not be stderr.
    (default: 'fatal')
  -v,--verbosity: Logging verbosity level. Messages logged at this level or
    lower will be included. Set to 1 for debug logging. If the flag was not set
    or supplied, the value will be changed from the default of -1 (warning) to 0
    (info) after flags are parsed.
    (default: '-1')
    (an integer)

absl.testing.absltest:
  --test_random_seed: Random seed for testing. Some test frameworks may change
    the default value of this flag between runs, so it is not appropriate for
    seeding probabilistic tests.
    (default: '301')
    (an integer)
  --test_randomize_ordering_seed: If positive, use this as a seed to randomize
    the execution order for test cases. If "random", pick a random seed to use.
    If 0 or not set, do not randomize test case execution order. This flag also
    overrides the TEST_RANDOMIZE_ORDERING_SEED environment variable.
    (default: '')
  --test_srcdir: Root of directory tree where source files live
    (default: '')
  --test_tmpdir: Directory for temporary testing files
    (default: '/tmp/absl_testing')
  --xml_output_file: File to store XML test results
    (default: '')

deepvariant.haplotypes:
  --[no]disable_haplotype_resolution: If True, makes
    `maybe_resolve_conflicting_variants` a no-op.
    (default: 'false')

deepvariant.logging_level:
  --logging_level: select general logging threshold.
    (default: 'INFO')

tensorflow.python.ops.parallel_for.pfor:
  --[no]op_conversion_fallback_to_while_loop: DEPRECATED: Flag is ignored.
    (default: 'true')

tensorflow.python.tpu.client.client:
  --[no]hbm_oom_exit: Exit the script when the TPU HBM is OOM.
    (default: 'true')
  --[no]runtime_oom_exit: Exit the script when the TPU runtime is OOM.
    (default: 'true')

tensorflow.python.tpu.tensor_tracer_flags:
  --delta_threshold: Log if history based diff crosses this threshold.
    (default: '0.5')
    (a number)
  --[no]tt_check_filter: Terminate early to check op name filtering.
    (default: 'false')
  --[no]tt_single_core_summaries: Report single core metric and avoid
    aggregation.
    (default: 'false')

absl.flags:
  --flagfile: Insert flag definitions from the given file into the command line.
    (default: '')
  --undefok: comma-separated list of flag names that it is okay to specify on
    the command line even if the program does not define a flag with that name.
    IMPORTANT: flags in this list that have arguments MUST use the --flag=value
    format.
    (default: '')

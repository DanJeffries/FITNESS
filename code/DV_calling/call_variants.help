Calling variants with a trained DeepVariant TF2/Keras model.
flags:

/tmp/Bazel.runfiles_2sg7js1d/runfiles/com_google_deepvariant/deepvariant/call_variants.py:
  --activation_layers: A list of activation layer names which we add to the
    debug info output. Needs include_debug_info flag to be True.
    (default: '')
    (a comma separated list)
  --batch_size: Number of candidate variant tensors to batch together during
    inference. Larger batches use more memory but are more computational
    efficient.
    (default: '1024')
    (an integer)
  --checkpoint: Required. Path to the TensorFlow model checkpoint to use to
    evaluate candidate variant calls.
  --config_string: String representation of a tf.ConfigProto message, with
    comma-separated key: value pairs, such as "allow_soft_placement: True". The
    value can itself be another message, such as "gpu_options:
    {per_process_gpu_memory_fraction: 0.5}".
  --[no]debugging_true_label_mode: If true, read the true labels from examples
    and add to output. Note that the program will crash if the input examples do
    not have the label field. When true, this will also fill everything when
    --include_debug_info is set to true.
    (default: 'false')
  --examples: Required. tf.Example protos containing DeepVariant candidate
    variants in TFRecord format, as emitted by make_examples. Can be a comma-
    separated list of files, and the file names can contain wildcard characters.
  --execution_hardware: When in cpu mode, call_variants will not place any ops
    on the GPU, even if one is available. In accelerator mode call_variants
    validates that at least some hardware accelerator (GPU/TPU) was available
    for us. This option is primarily for QA purposes to allow users to validate
    their accelerator environment is correctly configured. In auto mode, the
    default, op placement is entirely left up to TensorFlow.  In tpu mode, use
    and require TPU.
    (default: 'auto')
  --[no]include_debug_info: If true, include extra debug info in the output,
    including the original image_encoded.
    (default: 'false')
  --kmp_blocktime: Value to set the KMP_BLOCKTIME environment variable to for
    efficient MKL inference. See
    https://www.tensorflow.org/performance/performance_guide for more
    information. The default value is 0, which provides the best performance in
    our tests. Set this flag to "" to not set the variable.
    (default: '0')
  --limit: If set to > 0, limit processing to <= limit examples.
    (default: '0')
    (an integer)
  --max_batches: Max. batches to evaluate. Defaults to all.
    (an integer)
  --num_readers: Number of parallel readers to create for examples.
    (default: '8')
    (an integer)
  --outfile: Required. Destination path where we will write output candidate
    variants with additional likelihood information in TFRecord format of
    CallVariantsOutput protos.
  --writer_threads: Number of threads to use for writing. Set 0 to autodetect.
    In autodetect mode, 1 thread is used in CPU inference and all cpus are used
    when GPU is available. If set to a specific value other than 0 then
    autodetect is disabled. Maximum 16 processes can be used for writing.
    Default: 0
    (default: '0')
    (an integer)

absl.app:
  -?,--[no]help: show this help
    (default: 'false')
  --[no]helpfull: show full help
    (default: 'false')
  --[no]helpshort: show this help
    (default: 'false')
  --[no]helpxml: like --helpfull, but generates XML output
    (default: 'false')
  --[no]only_check_args: Set to true to validate args and exit.
    (default: 'false')
  --[no]pdb: Alias for --pdb_post_mortem.
    (default: 'false')
  --[no]pdb_post_mortem: Set to true to handle uncaught exceptions with PDB post
    mortem.
    (default: 'false')
  --profile_file: Dump profile information to a file (for python -m pstats).
    Implies --run_with_profiling.
  --[no]run_with_pdb: Set to true for PDB debug mode
    (default: 'false')
  --[no]run_with_profiling: Set to true for profiling the script. Execution will
    be slower, and the output format might change over time.
    (default: 'false')
  --[no]use_cprofile_for_profiling: Use cProfile instead of the profile module
    for profiling. This has no effect unless --run_with_profiling is set.
    (default: 'true')

absl.logging:
  --[no]alsologtostderr: also log to stderr?
    (default: 'false')
  --log_dir: directory to write logfiles into
    (default: '')
  --logger_levels: Specify log level of loggers. The format is a CSV list of
    `name:level`. Where `name` is the logger name used with
    `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g.
    `myapp.foo:INFO,other.logger:DEBUG`
    (default: '')
  --[no]logtostderr: Should only log to stderr?
    (default: 'false')
  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when
    it's logged to stderr, --verbosity is set to INFO level, and python logging
    is used.
    (default: 'true')
  --stderrthreshold: log messages at this level, or more severe, to stderr in
    addition to the logfile.  Possible values are 'debug', 'info', 'warning',
    'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr
    cancels the effect of this flag. Please also note that this flag is subject
    to --verbosity and requires logfile not be stderr.
    (default: 'fatal')
  -v,--verbosity: Logging verbosity level. Messages logged at this level or
    lower will be included. Set to 1 for debug logging. If the flag was not set
    or supplied, the value will be changed from the default of -1 (warning) to 0
    (info) after flags are parsed.
    (default: '-1')
    (an integer)

absl.testing.absltest:
  --test_random_seed: Random seed for testing. Some test frameworks may change
    the default value of this flag between runs, so it is not appropriate for
    seeding probabilistic tests.
    (default: '301')
    (an integer)
  --test_randomize_ordering_seed: If positive, use this as a seed to randomize
    the execution order for test cases. If "random", pick a random seed to use.
    If 0 or not set, do not randomize test case execution order. This flag also
    overrides the TEST_RANDOMIZE_ORDERING_SEED environment variable.
    (default: '')
  --test_srcdir: Root of directory tree where source files live
    (default: '')
  --test_tmpdir: Directory for temporary testing files
    (default: '/tmp/absl_testing')
  --xml_output_file: File to store XML test results
    (default: '')

deepvariant.logging_level:
  --logging_level: select general logging threshold.
    (default: 'INFO')

tensorflow.python.ops.parallel_for.pfor:
  --[no]op_conversion_fallback_to_while_loop: DEPRECATED: Flag is ignored.
    (default: 'true')

tensorflow.python.tpu.client.client:
  --[no]hbm_oom_exit: Exit the script when the TPU HBM is OOM.
    (default: 'true')
  --[no]runtime_oom_exit: Exit the script when the TPU runtime is OOM.
    (default: 'true')

tensorflow.python.tpu.tensor_tracer_flags:
  --delta_threshold: Log if history based diff crosses this threshold.
    (default: '0.5')
    (a number)
  --[no]tt_check_filter: Terminate early to check op name filtering.
    (default: 'false')
  --[no]tt_single_core_summaries: Report single core metric and avoid
    aggregation.
    (default: 'false')

absl.flags:
  --flagfile: Insert flag definitions from the given file into the command line.
    (default: '')
  --undefok: comma-separated list of flag names that it is okay to specify on
    the command line even if the program does not define a flag with that name.
    IMPORTANT: flags in this list that have arguments MUST use the --flag=value
    format.
    (default: '')
